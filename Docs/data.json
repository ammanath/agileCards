[
{
"title":"SOLID",
"primaryText":"",
"secondaryText":"",
"description":"S.O.L.I.D is an acronym for the first five object-oriented design(OOD)** principles** by Robert C. Martin, popularly known as Uncle Bob. These principles, when combined together, make it easy for a programmer to develop software that is easy to maintain and extend. They also make it easy for developers to avoid code smells, easily refactor code, and are also a part of the agile or adaptive software development.",
"refIcon":"",
"refUrl":"https://school.mtechviral.com/members/posts/17527-s-o-l-i-d-the-first-5-principles-of-object-oriented-design-with-dart"
"type":"title"
},
{
"title":"SOLID",
"primaryText":"Single responsibility principle",
"secondaryText":"A class should have one and only one reason to change, meaning that a class should have only one job.",
"description":"Spontaneous rupture of flexor tendons, unspecified hand",
"refIcon":"http://dummyimage.com/227x231.jpg/ff4444/ffffff",
"refUrl":"https://fotki.com/sed/sagittis/nam"
"type":"card"
},
{
"title":"SOLID",
"primaryText":"Open-closed Principle",
"secondaryText":"Objects or entities should be open for extension, but closed for modification.",
"description":"This simply means that a class should be easily extendable without modifying the class itself.",
"refIcon":"http://dummyimage.com/227x231.jpg/ff4444/ffffff",
"refUrl":"https://fotki.com/sed/sagittis/nam"
"type":"card"
},
{
"title":"SOLID",
"primaryText":"Liskov substitution principle",
"secondaryText":"Let q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T.",
"description":"All this is stating is that every subclass/derived class should be substitutable for their base/parent class.",
"refIcon":"http://dummyimage.com/227x231.jpg/ff4444/ffffff",
"refUrl":"https://fotki.com/sed/sagittis/nam"
"type":"card"
},
{
"title":"SOLID",
"primaryText":"Interface segregation principle",
"secondaryText":"A client should never be forced to implement an interface that it doesn’t use or clients shouldn’t be forced to depend on methods they do not use.",
"description":"",
"refIcon":"http://dummyimage.com/227x231.jpg/ff4444/ffffff",
"refUrl":"https://fotki.com/sed/sagittis/nam"
"type":"card"
},
{
"title":"SOLID",
"primaryText":"Dependency inversion principle",
"secondaryText":"Entities must depend on abstractions not on concretions. It states that the high level module must not depend on the low level module, but they should depend on abstractions.",
"description":"",
"refIcon":"http://dummyimage.com/227x231.jpg/ff4444/ffffff",
"refUrl":"https://fotki.com/sed/sagittis/nam"
"type":"card"
},

]